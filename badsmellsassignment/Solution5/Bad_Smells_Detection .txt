Smell Detection
1.
	Name: Duplicate Code
	Location: Solution5\Assignment1SalesApp.py class:Model
		function:validate_id() lines: 66 to 74) and
		function:validate_gender() lines: 76 to 84 and 
		function:validate_age() lines: 79 to 87 and 
		function:validate_sales() lines: 89 to 97 and 
		function:validate_bmi() lines: 99 to 107 and 
		function:validate_gender() lines: 109 to 117
	Reasons: 
		a) The functions are copy and pasted, and just the particular regex statement and the name of the parameter being regexed have been changed. 
		b) This has caused extra lines of code to be used making the class more difficult to read.
		c) If the procedure for validating was required to change the change would have to be repeated in each function. This creates extra, unnecessary coding.
		d) If changes were made there would be a risk that the change is not implemented the same in all places leading to a potential bug.
		e) Makes the code less attractive and elegant. 
	Strategy: Use the extract method. Make a new method with all of the similar elements within it and just call that method and pass in the differences as parameters.
	Severity (1-10): 6
	Ease of fix (1-10): 5
	
	Notes on the fix:
		a) Lines of code of the bad smell methods before fix = 42
		b) Commented out the code with the bad smell. Will delete when refactoring is finished and tested. Made the changes and ran the tests. Expected some of the tests to fail as they were testing methods that no longer existed. Looks like there was an unexpected problem with the data not loading.
		c) Found the problem from note b). The particular method I used as the basis for the new method had an extra check for the length of the element, which did not apply to all different cases. The length was added as a check for some cases because the regex wasn't picking up elements that didn't match because they were too long. I will perform a test to see if this is still the case.
		d) Currently throwing up 15 test failures. Seeing if this decreases when the old method call tests are changed. Changing 2 tests to test my theory.
		e) Decreased to 13 after 2 tests were changed. Will continue changes on the rest.
		f) Tests now fixed, but this is high risk to change the tests on the fly. Must need to make sure in the future that tests are thoroughly put in place and checked before the refactoring takes place. Can increase risk that bugs are missed.
		g) Tests now passing so will delete the commented out bad smell code. 
		h) Lines of code of the bad smell methods after fix = 7
		i) Backed up to GitHub.

2.
	Name: Dead Code
	Location: Solution5\Assignment1SalesApp.py class:Model
		function: serialise_data() lines: 59 to 61
		function: load_serialised_data() lines: 63 to 64
	Reasons:
		a) These methods do nothing apart from print that the function has been called. So currently useless.
		b) Was part of future development or project plan that was not implemented.
		c) Waste of lines of code.
		d) Even if these are required later it is just as easy to delete them now. The future design plans are much better being noted in documentation rather than noting it in code.
		e) Extra functions for a developer to get their head around, which even if they are simple and small they still waste time.
	Strategy: Delete the unused code. Make sure they are noted in the documents as maybe part of a plan for future development.
	Severity (1-10): 2
	Ease of fix (1-10): 10
	
	Notes on the fix:
		a) The first fix completed. Very simple fix so only backed up to GitHub once before fix made, and after fix made and tests run succesfully. Must make sure the more complex fixes are backed up after each small change. 
		b) By getting rid of these methods it has affected other methods I had forgotten about in the Controller class, namely the do_save_data() and  do_load_saved_file(). These were solely responsible for calling the dead code methods. Therefore I have deleted those as well. 
		c) When running the tests after making the changes as expected some of the tests are now irrelevant as they were checking that those methods were running. I am therefore getting rid of those tests.
		

3.
	Name: Switch Statements
	Location: Solution5\Assignment1SalesApp.py class:Model
		function: get_data() lines: 31 to 52
	Reasons: 
		a) Uses many extra lines of code.
		b) Each if statement is performing a similar task. These tasks will end up as the same method after fixing the duplicate code in bad smell 1.
		c) The if conditionals aren't really necessary because the data is in order and the if's are performed in sequence on the data. It is just iterating through the data.
	Strategy: Get rid of the switch statement and just have it iterating through the data and performing the validation in sequence. This is a particular strategy to fix this particular poorly written code, and is not a standard technique to fix this problem. The suggested strategies were not going to solve the problem effectively.
	Severity: 7
	Ease of fix: 4
	
		notes on the fix:
			a) third fix completed
			b) had some issues getting it to work. Test data wasn't loading. But now have that working. 
			c) shrank the code. get_data() went from 21 lines to 15 lines.
			d) ran tests successfully and updated version control.
		
4. 	Name: Long Method
	Location: Solution5\Assignment1SalesApp.py class:View
		function: pie_chart_bmi() lines: 159 - 206
	Reasons: 
		a) It is much longer than the standard rule of 10 lines.
		b) Has elements of other bad smells Duplicate Code and Switch Statement.
	Strategy: Use extract method on the duplicate code and switch statements.
	Severity (1-10): 7
	Ease of fix (1-10): 2
	
Overall evaluation / summary of the fixing bad smells process:
	1) I largely stuck to the process outlined in class. Although I could have done better at breaking down the harder fixes into smaller chunks, rather than trying to do the whole fix at one time. Could have cost me time if the fix had gone wrong and I had to go back to where I had last backed up.
	2) I approached my bad smells from the wrong way. Because of my limited time budgeted for the assignment I focussed on the easy fixes first, and avoided the hardest one, the Long Method. In the future I would want to attack the biggest bad smell first. 
	3) The biggest problem in my process was not adequately outlining the outcomes I needed to return after each refactor. I did not work out properly what I needed to test to ensure the refactoring worked, only considered that tests may need to change once I started refactoring. This risked introducing bugs. 